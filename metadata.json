{
  "repo": "https://github.com/dmaman86/algo-solutions/tree/main",
  "problems": {
    "arrays": [
      {
        "name": "four_number_sum",
        "difficulty": "hard",
        "languages": ["cpp", "js"]
      },
      {
        "name": "sorted_squared_array",
        "difficulty": "easy",
        "languages": ["js"]
      },
      {
        "name": "tournament_winner",
        "difficulty": "easy",
        "languages": ["js", "cpp"]
      },
      {
        "name": "two_number_sum",
        "difficulty": "easy",
        "languages": ["js"]
      },
      {
        "name": "validate_subsequence",
        "difficulty": "easy",
        "languages": ["js", "python"]
      },
      {
        "name": "subarray_sort",
        "difficulty": "hard",
        "languages": ["cpp", "js", "python"]
      },
      {
        "name": "count_squares",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "zigzag_traverse",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "min_rewards",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "apartment_hunting",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "line_through_points",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "calendar_matching",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      }
    ],
    "binary_search_trees": [
      {
        "name": "repair_bst",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "right_smaller_than",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "same_bsts",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "validate_three_nodes",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      }
    ],
    "binary_trees": [
      {
        "name": "find_nodes_distance_k",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "max_path_sum_in_binary_tree",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "compare_leaf_traversal",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "right_sibling_tree",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "flatten_binary_tree",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "all_kinds_of_node_depths",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      }
    ],
    "famous_algorithms": [
      {
        "name": "dijkstras_algorithm",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "kadanes_algorithm",
        "difficulty": "medium",
        "languages": ["js", "cpp"]
      },
      {
        "name": "kruskals_algorithm",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "prims_algorithm",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "topological_sort",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "astar_algorithm",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      }
    ],
    "graphs": [
      {
        "name": "minimum_passes_of_matrix",
        "difficulty": "medium",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "youngest_common_ancestor",
        "difficulty": "medium",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "cycle_in_graph",
        "difficulty": "medium",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "airport_connections",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "boggle_board",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "detect_arbitrage",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      }
    ],
    "greedy_algorithms": [
      {
        "name": "optimal_freelancing",
        "difficulty": "easy",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "tandem_bicycle",
        "difficulty": "easy",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "task_assignment",
        "difficulty": "medium",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "valid_starting_city",
        "difficulty": "medium",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "class_photos",
        "difficulty": "easy",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "minimum_waiting_time",
        "difficulty": "easy",
        "languages": ["js", "python", "cpp"]
      }
    ],
    "dynamic_programming": [
      {
        "name": "maximum_sum_submatrix",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "knapsack_problem",
        "difficulty": "hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "max_profit_with_k_transactions",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      },
      {
        "name": "longest_increasing_subsequence",
        "difficulty": "very hard",
        "languages": ["js", "python", "cpp"]
      }
    ]
  }
}
